openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22022
servers:
  - url: https://library.com

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'

      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    Topic:
      type: string
      enum:
        - ROMANCE
        - COMEDY
        - OTHER
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    crupdateBooks:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        topic:
          $ref: '#/components/schemas/Topic'
        pageNumbers:
          $ref: '#/components/schemas/PageSize'
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
  responses:
    Responses200Base:
      description: successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
    AuthorResponse200:
      description: author list
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/responses/Responses200Base'
              - properties:
                  body:
                    type: array
                    items:
                      $ref: "#/components/schemas/Author"
    BookResponse200:
      description: book list
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/responses/Responses200Base"
              - properties:
                  body:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"
  parameters:
    queryPagination:
      name: page
      in: query
      schema:
        type: object
        properties:
          page:
            type: string
    pathPagination:
      name: pageSize
      in: path
      schema:
        type: object
        properties:
          pageSize:
            type: integer







